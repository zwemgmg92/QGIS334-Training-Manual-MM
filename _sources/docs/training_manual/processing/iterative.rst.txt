Algorithm များ ထပ်ခါတလဲလဲ လုပ်ဆောင်ခြင်း (Iterative execution of algorithms)
=============================================================================

.. note:: ဤသင်ခန်းစာတွင် input vector layer တစ်ခုထဲရှိ feature တစ်ခုချင်းစီကို ပတ်ပြီး algorithm များကိုထပ်ခါထပ်ခါ run သည့်နည်းလမ်းကို ပြသပေးပါမည်။

အလိုအလျောက်လုပ်ဆောင်ပေး‌သောနည်းတစ်ခုဖြစ်သည့် model designer ကို သိရှိခဲ့ပြီးဖြစ်ပါသည်။ သို့သော် အချို့သောအခြေအနေများတွင် အလုပ်တစ်ခုကိုအလိုအလျောက်လုပ်ဆောင်ရန် modeler ကို မလိုအပ်သည်များရှိပါသည်။ ထိုသို့သော အခြေအနေများထဲမှ တစ်ခုကို ကြည့်ကြမည်ဖြစ်ပြီး၊ ကွဲပြားသောလုပ်ဆောင်ချက်တစ်ခုဖြစ်သည့် algorithm များထပ်ခါတလဲလဲလုပ်ဆောင်ခြင်းဖြင့် ထိုအခြေအနေကို မည်သို့အလွယ်တကူဖြေရှင်းမည်ကို ကြည့်ကြပါစို့။

ဤသင်ခန်းစာနှင့်သက်ဆိုင်သော data ကိုဖွင့်ပါ။ အောက်ပါအတိုင်းဖြစ်သင့်ပါသည်။

.. figure:: img/iterative/project.png

ယခင်သင်ခန်းစာများမှ DEM နှင့် DEM မှထုတ်ယူထားသော watersheds (ရေဝေရေလဲ) များကို မှတ်မိမည်ထင်ပါသည်။ သင့်အနေဖြင့် DEM ကို များစွာသော layer ငယ်လေးအဖြစ်သို့ ပိုင်းဖြတ်လိုပြီး၊ layer ငယ်တစ်ခုချင်းစီတွင် watershed တစ်ခုချင်းစီနှင့်သက်ဆိုင်သော elevation data များသာ ပါဝင်လိုသည်ဟု စဉ်းစားကြည့်ပါ။ နောက်ပိုင်းတွင် Watershed တစ်ခုချင်းစီနှင့်ဆက်စပ်သော parameter အချို့၊ ဥပမာ- ပျှမ်းမျှအမြင့် သို့မဟုတ် hypsographic curve (elevation ပြန့်နှံ့မှုကို ဖော်ပြသောမျဉ်းကွေး) ကိုတွက်ချက်လိုသောအခါ ၎င်းသည်အသုံးဝင်ပါလိမ့်မည်။

Watershed အရေအတွက်များစွာရှိပါက ဤအလုပ်သည် အကြာကြီးလုပ်ဆောင်ရပြီး ငြီးငွေ့ဖွယ်ကောင်းနိုင်ပါသည်။ သို့သော် ၎င်းကို အလွယ်တကူ အလိုအလျောက်လုပ်ဆောင်နိုင်စေပါသည်။ 

Raster layer တစ်ခုကို polygon layer တစ်ခုဖြင့် clip ပြုလုပ်သော algorithm ကို *Clip raster with polygons* ဟုခေါ်ဆိုပြီး အောက်ပါ parameter dialog ရှိပါသည်။

.. figure:: img/iterative/clip.png

Watersheds layer နှင့် DEM ကို input အနေဖြင့်အသုံးပြုပြီး algorithm ကို run နိုင်ပါသည်၊ အောက်ပါရလာဒ်ကို ရရှိပါလိမ့်မည်။

.. figure:: img/iterative/full_clip.png

မြင်တွေ့ရသည့်အတိုင်း watershed polygon များအားလုံးမှ လွှမ်းခြုံသော ဧရိယာကို အသုံးပြုပါသည်။

အလိုရှိသော watershed ကို select လုပ်ပြီး algorithm ကို run ခြင်းဖြင့် watershed တစ်ခုတည်းဖြင့်သာ DEM ကို clip လုပ်နိုင်ပါသည်။

.. figure:: img/iterative/selection.png

Select ပြုလုပ်ထားသော feature များကိုသာအသုံးပြုသောကြောင့် raster layer ကို ဖြတ်တိရန် select ပြုလုပ်ထားသော polygon ကိုသာအသုံးပြုပါလိမ့်မည်။

.. figure:: img/iterative/selection_clip.png

ထိုအဆင့်အတိုင်း watershed အားလုံးအတွက်လုပ်ဆောင်ပါက ကျွန်ုပ်တို့လိုချင်သော ရလာဒ်ကို ရရှိပါလိမ့်မည်၊ သို့သော် ထိုသို့အားလုံးအတွက်လုပ်ဆောင်ခြင်းသည် လက်တွေ့သိပ်မဆန်လှပါ။ ထိုအစား အဆိုပါ *select နှင့် crop* ပြုလုပ်ခြင်းကို မည်ကဲ့သို့အလိုအလျောက်လုပ်ဆောင်မည်ကို ကြည့်ကြပါမည်။

ပထမဦးစွာ ယခင်ကလုပ်ခဲ့သော selection ကို ဖယ်ရှားပါ၊ ထို့ကြောင့် polygon များအားလုံးကို အသုံးပြုပါလိမ့်မည်။ *Clip raster with polygon* algorithm ကိုဖွင့်ပြီး ယခင်ကအတိုင်း input များရွေးချယ်ပေးပါ၊ ဤတစ်ကြိမ်တွင် watersheds layer ကို ရွေးချယ်ပေးရသည့် vector layer input နေရာ၏ ညာဘက်ရှိ ခလုတ်ကို နှိပ်ပါ။ 

.. figure:: img/iterative/iterate_button.png

ထိုခလုတ်သည် ရွေးချယ်ထားသော input layer တွင်ရှိသော feature အရေအတွက်အတိုင်း layer များခွဲထုတ်ပေးပြီး၊ layer တစ်ခုစီတွင် polygon တစ်ခုစီပါဝင်ပါသည်။ ထို ခွဲထုတ်ထားသော layer ဖြင့် algorithm ကို ထပ်ခါထပ်ခါလုပ်ဆောင်မည်ဖြစ်ပြီး polygon တစ်ခုတည်းရှိသော layer တစ်ခုချင်းစီအတွက် တစ်ကြိမ်စီ လုပ်ဆောင်ပေးပါမည်။ ဤ algorithm မှရလာဒ်သည် raster layer တစ်ခုတည်းမဟုတ်ပဲ raster layer များအစုတစ်ခုဖြစ်ပြီး၊ algorithm လုပ်ဆောင်မှုတစ်ကြိမ်အတွက် raster layer တစ်ခုဖြစ်ပါသည်။

အထက်တွင်ရှင်းပြထားသည့်အတိုင်း algorithm ကို run ပါက အောက်ပါရလာဒ်ကို ရရှိပါလိမ့်မည်။

.. figure:: img/iterative/result_iterative.png

Layer တစ်ခုချင်းစီအတွက် အနည်းဆုံးတန်ဖိုးမှ အများဆုံးတန်ဖိုးအထိကို အဖြူနှင့်အမည်း အရောင် palette ကိုသုံးပြီး ကွဲပြားစွာချိန်ညှိပြသထားပါသည်။ ထို့ကြောင့် layer များအကြား နယ်နိမိတ်သည် အရောင်ကိုက်ညီမှုမရှိပဲ ကွဲပြားသောအပိုင်းများကို မြင်တွေ့နေရခြင်းဖြစ်ပါသည်။ သို့သော် တန်ဖိုးများမှာ ကိုက်ညီမှုရှိပါသည်။

Output ဖိုင်နာမည်တစ်ခုကိုထည့်ထားပါက ထိုပေးထားသောဖိုင်နာမည်နှင့် နောက်ဆက်စာလုံးအနေဖြင့် iteration တစ်ခုချင်းစီ၏သက်ဆိုင်ရာနံပါတ်ကို အသုံးပြုပြီး ရလာဒ်ဖိုင်များကို နာမည်ပေးမည်ဖြစ်ပါသည်။
